{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAgBhD,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAKlB,SAGI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCRnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBb,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MAC/B,OACI,sBAAKI,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCAHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KA6BtC,OApBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGtB,IAYIC,EDvB0BK,CAAa1B,GAAjCa,EAJwB,EAI7BN,KAJ6B,EAIhBa,QAcrB,OACI,qCACI,oBAAIJ,UAAU,yCAAd,SAAwDhB,IAIxD,qBAAKgB,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAGQA,GAFCA,EAAIC,aEuBtBgB,EApDM,WAAM,MAIWzC,mBAAS,CAAC,KAJrB,mBAIlB0C,EAJkB,KAIN3C,EAJM,KAezB,OAEE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGE2C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CACEA,SAAUA,GACLA,U,MCxBjB6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.64c37df1.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if( inputValue.trim().length > 2) {\r\n            setCategories( cats => [inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit } >\r\n            {/* Siempre se actualiza con el ultimo valor de la constante */}\r\n            {/* <h1>{ inputValue }</h1> */}\r\n            <input            \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\r\n  setCategories: PropTypes.func.isRequired\r\n\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=20&api_key=49LiJRshmI8mvvRk8vDWYgNOmJJhSL47`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    //console.log(gifs);\r\n    // setImages(gifs);\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({ url, title }) => {\r\n    return (\r\n        <div className='card animate__animated animate__fadeIn'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nimport { getGifs } from './helpers/getGifs';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // const [images, setImages] = useState([])\r\n\r\n    const { data:images, loading } = useFetchGifs(category);\r\n\r\n    // El category, es para que vuelva a llamar la funcion si cambia el category. EN este caso\r\n    // No cambia nunca.\r\n\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(setImages)\r\n    // }, [category]);\r\n\r\n    // Esta verga se llama cada vez que cambias algo. No es eficiente.\r\n    // Usamos useEffect\r\n    // getGifs();\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__slideInDown'>{category}</h3>\r\n{/* \r\n            { loading && <p>Loading</p> } */}\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map(img =>\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            // {...img}\r\n                            {...img}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../components/helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    // Esto permite llamar a la funciÃ³n UNA SOLA VEZ, cuando se renderiza el componente.\r\n    // No peude ser async\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then( imgs => {           \r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            })\r\n    }, []);\r\n\r\n    /*\r\n    setTimeout(() => {\r\n        setState({\r\n            data: [1, 2, 3, 4, 5, 6, 7],\r\n            loading: false\r\n        })\r\n    }, 3000);\r\n    */\r\n\r\n\r\n    return state; // { data:[], loading: true}\r\n\r\n}","import React, { useState } from 'react';\n\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n  // const categories = ['One Puch', 'Samurai X', 'Dragon Ball'];\n  // const [categories, setCategories] = useState(['One Puch', 'Samurai X', 'Dragon Ball']);\n  const [categories, setCategories] = useState(['']);\n\n  /*\n  const handleAdd = () => {\n\n    // setCategories([...categories, 'HunterXHunter']);\n    setCategories( cats => [...cats, 'HunterXHunter']);\n\n  }\n  */\n\n  return (\n\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      {\n        categories.map(category =>\n          <GifGrid\n            category={category}\n            key={category}\n          />\n        )\n      }\n\n      {/* <button onClick={ handleAdd } >Agregar</button> */}\n\n      {/* <ol>\n        {\n          // categories.map(category => {\n          //   return <li key={category}>{category}</li>\n          // })\n          \n          // categories.map(category => \n          //   <GifGrid\n          //   category={category}\n          //   key={category} \n          //   />\n          // )\n        }\n        </ol> */}\n    </>\n  );\n\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp  />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}